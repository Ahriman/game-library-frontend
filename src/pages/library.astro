---
import Layout from '@/layouts/Layout.astro';

const API_BASE_URL = 'http://localhost:3000';
const GAMES_PER_PAGE = 9; // Límite inicial

let juegos: { id: any; cover: any; title: unknown; description: any; }[] = []; // TODO: Crear interfaz para juegos
let offset = 0;

async function fetchGames() {
  try {
    const response = await fetch(`${API_BASE_URL}/games?limit=${GAMES_PER_PAGE}&offset=${offset}`);
    juegos = await response.json();
  } catch (error) {
    console.error('Error fetching games:', error);
  }
}

await fetchGames();
---

<Layout title="Biblioteca de Juegos - GameLib">
  <main class="container mx-auto mt-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-3xl font-bold text-gray-900 dark:text-white">Biblioteca de Juegos</h1>
      <button id="add-game-button" class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:focus:ring-blue-900">
        Añadir Nuevo Juego
      </button>
    </div>

    <!-- Control de límite de juegos -->
    <div class="flex items-center gap-4 mb-6">
      <label for="limit-slider" class="text-gray-900 dark:text-white">Juegos por página:</label>
      <input id="limit-slider" type="range" min="3" max="300" step="3" value={GAMES_PER_PAGE} class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700">
      <span id="limit-value" class="text-gray-900 dark:text-white">{GAMES_PER_PAGE}</span>
    </div>

    <!-- Lista de juegos -->
    <ul id="games-list" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
      {juegos.map((juego: { id: any; cover: any; title: unknown; description: any; }) => (
        <li class="max-w-sm bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-md dark:shadow-lg p-4 m-4">
          <img src={juego.cover || 'https://via.placeholder.com/150'} alt={String(juego.title)} class="w-full h-40 object-cover rounded-t-lg mb-4" />
          <div class="p-5">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2">{juego.title}</h2>
            <p class="text-gray-700 dark:text-gray-300 mb-4">{juego.description || 'Sin descripción'}</p>
            <div class="flex justify-between">
              <button class="text-blue-700 dark:text-blue-400 hover:underline" onclick={`editGame('${juego.id}')`}>Editar</button>
              <button class="text-red-700 dark:text-red-400 hover:underline" onclick={`deleteGame('${juego.id}')`}>Eliminar</button>
            </div>
          </div>
        </li>
      ))}
    </ul>

    <!-- Paginación -->
    <div class="flex justify-between items-center mt-6">
        <button id="prev-page" class="text-white bg-blue-500 hover:bg-blue-600 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:focus:ring-blue-900" disabled={offset === 0}>
          Anterior
        </button>
        <button id="next-page" class="text-white bg-blue-500 hover:bg-blue-600 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:focus:ring-blue-900">
          Siguiente
        </button>
    </div>

  </main>
</Layout>

<script is:inline define:vars={{API_BASE_URL, GAMES_PER_PAGE}}>
  let limit = GAMES_PER_PAGE;
  let offset = 0;

  document.getElementById('add-game-button').addEventListener('click', () => {
    window.location.href = '/agregar';
  });

  document.getElementById('limit-slider').addEventListener('input', async (event) => {
    limit = event.target.value;
    document.getElementById('limit-value').textContent = limit;
    offset = 0; // Reiniciar el offset al cambiar el límite
    await fetchGames();
  });

  document.getElementById('prev-page').addEventListener('click', async () => {
    if (offset > 0) {
      offset -= limit;
      await fetchGames();
    }
  });

  document.getElementById('next-page').addEventListener('click', async () => {
    offset += limit;
    await fetchGames();
  });

  async function fetchGames() {
    try {
      const response = await fetch(`${API_BASE_URL}/games?limit=${limit}&offset=${offset}`);
      const juegos = await response.json();

      const gamesList = document.getElementById('games-list');
      gamesList.innerHTML = '';

      juegos.forEach((juego) => {
        const li = document.createElement('li');
        li.classList.add('max-w-sm', 'bg-white', 'dark:bg-gray-800', 'border', 'border-gray-200', 'dark:border-gray-700', 'rounded-lg', 'shadow-md', 'dark:shadow-lg', 'p-4', 'm-4');
        li.innerHTML = `
          <img src="${juego.cover || 'https://via.placeholder.com/150'}" alt="${juego.title}" class="w-full h-40 object-cover rounded-t-lg mb-4" />
          <div class="p-5">
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2">${juego.title}</h2>
            <p class="text-gray-700 dark:text-gray-300 mb-4">${juego.description || 'Sin descripción'}</p>
            <div class="flex justify-between">
              <button class="text-blue-700 dark:text-blue-400 hover:underline" onclick="editGame('${juego.id}')">Editar</button>
              <button class="text-red-700 dark:text-red-400 hover:underline" onclick="deleteGame('${juego.id}')">Eliminar</button>
            </div>
          </div>
        `;
        gamesList.appendChild(li);
      });

      document.getElementById('prev-page').disabled = offset === 0;
      document.getElementById('next-page').disabled = juegos.length < limit;
    } catch (error) {
      console.error('Error fetching games:', error);
    }
  }

  async function editGame(gameId) {
    window.location.href = `/editar/${gameId}`;
  }

  async function deleteGame(gameId) {
    if (confirm('¿Estás seguro de que deseas eliminar este juego?')) {
      try {
        const response = await fetch(`${API_BASE_URL}/games/${gameId}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          alert('Juego eliminado con éxito');
          await fetchGames();
        } else {
          alert('Error al eliminar el juego');
        }
      } catch (error) {
        console.error('Error al eliminar el juego:', error);
        alert('Error al eliminar el juego');
      }
    }
  }

  fetchGames(); // Llamar a fetchGames al cargar la página
</script>