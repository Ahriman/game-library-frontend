---
const { isLoggedIn } = Astro.locals;

let links = [
  { href: '/', text: 'Inicio' },
];

if (isLoggedIn) {
  links.push(
    { href: '/library', text: 'Biblioteca' },
    { href: '/profile', text: 'Perfil' }
  );
} else {
  links.push(
    { href: '/login', text: 'Login'},
    { href: '/register', text: 'Registro' }
  );
}

const currentPath = Astro.url.pathname;
---

<!-- <nav class="sticky top-0 z-50 border-gray-200 bg-gray-50 dark:bg-gray-800 dark:border-gray-700 shadow"> -->
<nav class="border-gray-200 bg-gray-50 dark:bg-gray-800 dark:border-gray-700 shadow mb-4">
  <div class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4">
    <a href="." class="flex items-center space-x-3 rtl:space-x-reverse">
        <img src="https://flowbite.com/docs/images/logo.svg" class="h-8" alt="Flowbite Logo" />
        <span class="self-center text-2xl font-semibold whitespace-nowrap dark:text-white">GameLib</span>
    </a>

    <button id="theme-toggle" type="button" class="relative w-10 h-10 text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-none focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-700 rounded-lg p-2.5">
      <svg id="theme-toggle-dark-icon" class="absolute inset-0 hidden w-6 h-6 m-auto" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
      </svg>
      <svg id="theme-toggle-light-icon" class="absolute inset-0 hidden w-6 h-6 m-auto" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
        <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
      </svg>
      <svg id="theme-toggle-system-icon" class="absolute inset-0 hidden w-6 h-6 m-auto" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 16H5a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v1M9 12H4m8 8V9h8v11h-8Zm0 0H9m8-4a1 1 0 1 0-2 0 1 1 0 0 0 2 0Z" />
      </svg>
    </button>

    <button data-collapse-toggle="navbar-solid-bg" type="button" class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600" aria-controls="navbar-solid-bg" aria-expanded="false">
      <span class="sr-only">Open main menu</span>
      <svg class="w-5 h-5" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 17 14">
        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 1h15M1 7h15M1 13h15"/>
      </svg>
    </button>

    <div class="hidden w-full md:block md:w-auto" id="navbar-solid-bg">
      <ul class="flex flex-col font-medium mt-4 rounded-lg bg-gray-50 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-transparent dark:bg-gray-800 md:dark:bg-transparent dark:border-gray-700">
        {
          links.map(({ href, text }) => (
            <li>
              <a 
                href={href} 
                class="block py-2 px-3 md:p-0 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent"
                aria-current={currentPath === href ? 'page' : undefined}
                data-view-transition
                >
                {text}
              </a>

              {
                currentPath === href && (
                  <div transition:name="menu-line" class="border-b-2 border-blue-700"></div>
                )
              }
            </li>
          ))
        }

        {isLoggedIn && (
          <li>
            <button onclick="logout()" class="block py-2 px-3 md:p-0 text-gray-900 rounded hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-blue-700 dark:text-white md:dark:hover:text-blue-500 dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent">
              Logout
            </button>
          </li>
        )}
      </ul>
    </div>
    
  </div>
</nav>


<script is:inline>

  function logout() {
    document.cookie = 'token=; Path=/; Max-Age=-1;';
    window.location.href = '/';
  }

  document.addEventListener("DOMContentLoaded", async () => {
    const themeToggleBtn = document.getElementById("theme-toggle");
    const darkIcon = document.getElementById("theme-toggle-dark-icon");
    const lightIcon = document.getElementById("theme-toggle-light-icon");
    const systemIcon = document.getElementById("theme-toggle-system-icon");

    // Obtener tema actual del localStorage o predeterminar a 'system'
    let currentTheme = localStorage.getItem("theme") || "system";

    // Función para determinar si el sistema prefiere el modo oscuro
    function isSystemDark() {
      return window.matchMedia("(prefers-color-scheme: dark)").matches;
    }

    // Función para aplicar el tema
    function applyTheme(theme) {
      // Actualizar iconos
      darkIcon.classList.add("hidden");
      lightIcon.classList.add("hidden");
      systemIcon.classList.add("hidden");

      // Limpiar clases de tema
      document.documentElement.classList.remove("dark", "light");

      if (theme === "dark") {
        document.documentElement.classList.add("dark");
        darkIcon.classList.remove("hidden");
      } else if (theme === "light") {
        document.documentElement.classList.add("light");
        lightIcon.classList.remove("hidden");
      } else {
        // Modo sistema
        systemIcon.classList.remove("hidden");
        if (isSystemDark()) {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.add("light");
        }
      }
    }

    // Monitorear cambios en el esquema del sistema
    window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", () => {
      if (currentTheme === "system") {
        applyTheme("system");
      }
    });

    // Alternar tema al hacer clic en el botón
    themeToggleBtn.addEventListener("click", () => {
      if (currentTheme === "light") {
        currentTheme = "dark";
      } else if (currentTheme === "dark") {
        currentTheme = "system";
      } else {
        currentTheme = "light";
      }

      // Guardar tema seleccionado en localStorage
      localStorage.setItem("theme", currentTheme);
      applyTheme(currentTheme);
    });

    // Aplicar tema inicial basado en localStorage
    applyTheme(currentTheme);

  });

</script>
